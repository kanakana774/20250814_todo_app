<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Googleのチェックスタイルをベースにし、独自のルールの追加や不要そうなルールの削除をし、
    作成した。使いにくいルールや必要なルールがあれば都度更新していくこと。
-->

<module name="Checker">
    <module name="SuppressWarningsFilter"/>
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>
    <property name="fileExtensions" value="java, properties, xml"/>

    <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/filefilters/index.html -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

    <!-- https://checkstyle.org/filters/suppressionfilter.html -->
    <module name="SuppressionFilter">
        <property name="file" value="${org.checkstyle.google.suppressionfilter.config}"
                  default="checkstyle-suppressions.xml"/>
        <property name="optional" value="true"/>
    </module>

    <!-- Checks for whitespace(タブ文字を含むかのチェック)          -->
    <!-- See http://checkstyle.org/checks/whitespace/index.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Checks for long source files(ファイル内の行数のチェック)    -->
    <!-- See https://checkstyle.org/checks/sizes/filelength.html -->
    <module name="FileLength">
        <property name="max" value="500"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <!-- Checks for long lines(1行の文字数のチェック)    -->
    <!-- See https://checkstyle.org/checks/sizes/linelength.html -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="100"/>
        <property name="ignorePattern"
                  value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <module name="TreeWalker">
        <!-- Checks that the outer type name and the file name match(クラス名とファイル名が一致してるかのチェック)    -->
        <!-- See https://checkstyle.org/checks/sizes/linelength.html -->
        <module name="OuterTypeFilename"/>

        <!-- Checks for long methods and constructors(メソッドとコンストラクタの行数のチェック)    -->
        <!-- See https://checkstyle.org/checks/sizes/methodlength.html -->
        <module name="MethodLength">
            <property name="max" value="50"/>
        </module>

        <!-- Checks that there is no method finalize with zero parameters(ファイナライザが使われていないかのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/nofinalizer.html -->
        <module name="NoFinalizer"/>

        <!-- Checks that there are no import statements that use the * notation(importに*を使っていないかのチェック)    -->
        <!-- See https://checkstyle.org/checks/imports/avoidstarimport.html -->
        <module name="AvoidStarImport"/>

        <!-- Checks for redundant import statements(冗長なimportのチェック)    -->
        <!-- See https://checkstyle.org/checks/imports/redundantimport.html -->
        <module name="RedundantImport"/>

        <!-- Checks for unused import statements(未使用のimportのチェック)    -->
        <!-- See https://checkstyle.org/checks/imports/unusedimports.html -->
        <module name="UnusedImports"/>

        <!-- Checks for over-complicated boolean expressions(過度に複雑なブール式がないかチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/simplifybooleanexpression.html -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Checks for over-complicated boolean return statements(過度に複雑なブール型returnステートメントのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/simplifybooleanreturn.html -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class
             (フィールド名と、メソッドの引数名が重複していないことのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/hiddenfield.html -->
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>

        <!-- Checks that long constants are defined with an upper ell(Long型の末尾につける"L"が大文字であることのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/simplifybooleanreturn.html -->
        <module name="UpperEll"/>

        <!-- Checks that there is only one statement per line(1行に1文であることのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/onestatementperline.html -->
        <module name="OneStatementPerLine"/>

        <!-- Checks that each variable declaration is in its own statement and on its own line(複数の変数が同時に宣言されていないことのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/multiplevariabledeclarations.html -->
        <module name="MultipleVariableDeclarations"/>

        <!-- Checks specified tokens text for matching an illegal pattern(不必要に分かりにくい表現ユニコード表現などが使われていないことのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/illegaltokentext.html -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>

        <!-- Checks that package names conform to a specified pattern(パッケージ名が命名規則に沿っていることのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/packagename.html -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-zA-Z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks for assignments in subexpressions(条件式や引数指定における代入を行っていないことのチェック)    -->
        <!-- See https://checkstyle.org/checks/coding/innerassignment.html -->
        <module name="InnerAssignment"/>

        <!-- Checks that chosen statements are not line-wrapped(インポート文などの途中で改行されていないことのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/nolinewrap.html -->
        <module name="NoLineWrap">
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>

        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, § 8.1.1, 8.3.1, 8.4.3 and 9.4
            (public static finalなどの修飾子の順番が正しいことのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/nolinewrap.html -->
        <module name="ModifierOrder"/>

        <!-- Checks that a token is followed by whitespace(トークンの後に空白があるかのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/whitespaceafter.html -->
        <module name="WhitespaceAfter">
            <property name="tokens"
                      value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN,
                      LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS,
                      LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,
                      LITERAL_YIELD, LITERAL_CASE"/>
        </module>

        <!-- Checks that a token is surrounded by whitespace(トークンが空白で囲まれていることのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/whitespacearound.html -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="ignoreEnhancedForColon" value="false"/>
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                      BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                      LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                      LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                      LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                      NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                      SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks　
                     may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Checks the style of array type definitions(配列型の定義のスタイル(String[] args)のチェック)    -->
        <!-- See https://checkstyle.org/checks/misc/arraytypestyle.html -->
        <module name="ArrayTypeStyle"/>

        <!-- Checks for empty line separators before package, all import declarations,
             fields, constructors, methods, nested classes, static initializers and instance initializers
             (インポート宣言、フィールド、コンストラクターなどの前に空の行区切りがあるかのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/emptylineseparator.html -->
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                      STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF,
                      COMPACT_CTOR_DEF"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!-- Checks line wrapping with separators(区切り文字による改行のチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/separatorwrap.html -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <!-- Checks that type names conform to a specified pattern(型名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/typename.html -->
        <module name="TypeName">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                        ANNOTATION_DEF, RECORD_DEF"/>
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that instance variable names conform to a specified pattern(インスタンス変数名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/membername.html -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that method parameter names conform to a specified pattern(メソッドのパラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/parametername.html -->
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks lambda parameter names(ラムダのパラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/lambdaparametername.html -->
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that local, non-final variable names conform to a specified pattern
            (ローカルの非final変数名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/localvariablename.html -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that pattern variable names conform to a specified pattern(パターン変数名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/patternvariablename.html -->
        <module name="PatternVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Pattern variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that class type parameter names conform to a specified pattern(クラス型パラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/classtypeparametername.html -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that record component names conform to a specified pattern(レコードのコンポーネント名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/recordcomponentname.html -->
        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Record component name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that record type parameter names conform to a specified pattern(レコード型パラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/recordtypeparametername.html -->
        <module name="RecordTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern"
                     value="Record type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that method type parameter names conform to a specified pattern(メソッドの型パラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/methodtypeparametername.html -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that interface type parameter names conform to a specified pattern(インターフェイスの型パラメータ名が指定したパターンに一致するかのチェック)    -->
        <!-- See https://checkstyle.org/checks/naming/interfacetypeparametername.html -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct to the typical convention
            (型パラメータの<>の周りの空白が正しいかのチェック)    -->
        <!-- See https://checkstyle.org/checks/whitespace/genericwhitespace.html -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!-- Checks correct indentation of Java code(インデントが正しいかのチェック)    -->
        <!-- See https://checkstyle.org/checks/misc/indentation.html -->
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="4"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="8"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="arrayInitIndent" value="4"/>
        </module>

        <!-- Checks location of annotation on language elements(アノテーションの位置のチェック)    -->
        <!-- See https://checkstyle.org/checks/annotation/annotationlocation.html -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF,
                            RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!-- Checks that Javadocs are located at the correct position(javadocが正しい位置にあるかのチェック)    -->
        <!-- See https://checkstyle.org/checks/javadoc/invalidjavadocposition.html -->
        <module name="InvalidJavadocPosition"/>

        <!-- Checks that one blank line before the block tag if it is present in Javadoc(javadocのブロックタグの前に空白行があることのチェック)    -->
        <!-- See https://checkstyle.org/checks/javadoc/requireemptylinebeforeblocktaggroup.html -->
        <module name="RequireEmptyLineBeforeBlockTagGroup"/>
    </module>
</module>